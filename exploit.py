# exploit.py - Simulated web exploits with color-coded CLI and progress bar

import requests
from tqdm import tqdm  # For progress bar in brute-force
from colorama import Fore  # For colored messages
from reporter import Reporter

def brute_force_login(url, wordlist_path="creds.txt"):
    """
    Simulate a weak login brute-force check.
    Uses a credential list from creds.txt (format: username:password)
    """
    login_url = url.rstrip("/") + "/login.php"
    print(Fore.CYAN + "[*] Attempting brute-force login simulation...")

    try:
        with open(wordlist_path, "r", encoding="utf-8") as file:
            creds = [line.strip().split(":", 1) for line in file if ":" in line]
    except FileNotFoundError:
        print(Fore.RED + "[-] Credential file not found.")
        return "Credential file not found.", "Low", "Provide a valid credentials file."

    for username, password in tqdm(creds, desc="Trying credentials"):
        try:
            response = requests.post(login_url, data={"username": username, "password": password}, timeout=5)
            if "Login failed" not in response.text:
                print(Fore.RED + f"[!] Weak credentials found: {username}:{password}")
                return f"Weak credentials found: {username}:{password}", "High", "Use strong passwords; implement rate limiting."
        except requests.RequestException:
            continue

    print(Fore.GREEN + "[+] No weak credentials found.")
    return "No weak credentials found.", "Low", "Ensure brute-force protections are in place."

def simulate_sql_injection(url):
    """
    Simulate SQL injection vulnerability detection.
    """
    print(Fore.CYAN + "[*] Testing for SQL Injection...")
    test_url = url.rstrip("/") + "/search.php?q=' OR '1'='1"
    try:
        response = requests.get(test_url, timeout=5)
        if "sql" in response.text.lower() or "error" in response.text.lower():
            print(Fore.RED + "[!] Potential SQL injection detected.")
            return "Potential SQL injection detected.", "High", "Use parameterized queries."
    except requests.RequestException as e:
        print(Fore.RED + f"[!] Error during SQL test: {e}")
        return f"SQL Injection test error: {e}", "Low", "Review endpoint stability."

    print(Fore.GREEN + "[+] No SQL injection indicators.")
    return "No SQL injection indicators.", "Low", "Ensure input sanitization."

def simulate_xss(url):
    """
    Simulate reflected XSS vulnerability detection.
    """
    print(Fore.CYAN + "[*] Testing for Cross-Site Scripting (XSS)...")
    test_url = url.rstrip("/") + "/search.php?q=<script>alert(1)</script>"
    try:
        response = requests.get(test_url, timeout=5)
        if "<script>alert(1)</script>" in response.text:
            print(Fore.RED + "[!] Reflected XSS detected.")
            return "Reflected XSS detected.", "Medium", "Sanitize inputs; implement Content Security Policy (CSP)."
    except requests.RequestException as e:
        print(Fore.RED + f"[!] Error during XSS test: {e}")
        return f"XSS test error: {e}", "Low", "Review endpoint stability."

    print(Fore.GREEN + "[+] No XSS detected.")
    return "No XSS detected.", "Low", "Ensure proper output encoding and filtering."

def check_file_upload(url):
    """
    Check for the existence of a file upload form (basic detection).
    """
    print(Fore.CYAN + "[*] Checking for file upload form...")
    upload_url = url.rstrip("/") + "/upload.php"
    try:
        response = requests.get(upload_url, timeout=5)
        if "file" in response.text.lower():
            print(Fore.RED + "[!] File upload form found.")
            return "File upload form detected.", "Medium", "Restrict file types; validate and scan uploaded files."
    except requests.RequestException as e:
        print(Fore.RED + f"[!] Error checking file upload: {e}")
        return f"File upload check error: {e}", "Low", "Protect file upload endpoints."

    print(Fore.GREEN + "[+] No file upload form detected.")
    return "No file upload form.", "Low", "Ensure upload protection mechanisms are enforced."

def run_exploits(url, reporter: Reporter):
    """
    Executes all exploit simulations and logs the results to the reporter.
    """
    print(Fore.YELLOW + "\n[*] Running exploit simulations...\n")

    # List of simulated exploit checks
    exploits = [
        ("Weak Login Credential Check", brute_force_login),
        ("SQL Injection Test", simulate_sql_injection),
        ("XSS Test", simulate_xss),
        ("File Upload Check", check_file_upload),
    ]

    # Run each exploit and log the result
    for title, exploit in exploits:
        result, severity, remediation = exploit(url)
        reporter.add_section(title, f"Result: {result}\nSeverity: {severity}\nRemediation: {remediation}")
